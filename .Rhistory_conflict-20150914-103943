}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M)
source("setup.R")
# Calibration data set
# Don't use bushfire set (so avoid 2003)
# Merge the ET MODIS data with the original Cotter data
# Maybe make this into a Cotter.M_ET dataset?
Flow.Modis.zoo <- ETa.merge(Flowdata=Cotter,ETdata=Cot_MODISET)
# the calibration data
data.modis.cal <- window(Flow.Modis.zoo, start = "2005-01-01",end = "2008-12-31")
# Create mother of a function that fits all three
# first define the hydromad object
# using GR4J but could be any Hydromad model
Cotter_mod_M <- hydromad(DATA=data.modis.cal,
sma = "gr4j", routing = "gr4jrouting",
x1 = c(100,1500), x2 = c(-30,20),
x3 = c(5,500), x4 = c(0.5,10),
etmult=c(0.01,0.5),
return_state=TRUE)
# Define a function that fits all three (FLOW_MODIS fit by SCE)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=Objfun)
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
w <- get(w)
ETF_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get(w)
ETAggr_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, Fit_base=F)
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=Objfun)
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
print(w)
w <- get(w)
ETF_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get(w)
ETAggr_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
?get
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=Objfun)
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w")
ETF_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w")
ETAggr_fit <- fitBySCE(mod,
objective=~w*Objfun(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE)#, Objfun=) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney"))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w")
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w")
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = hmadstat("viney")))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE)#, Objfun=) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney")
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w")
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w")
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = hmadstat("viney")))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE)#, Objfun=) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney"))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w")
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w")
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = hmadstat("viney")))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE) {
#, Objfun=) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney"))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w")
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w")
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = hmadstat("viney")))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
source("setup.R")
# -----------------------------------------------------------
# 3.Do the standard fitting as test
# -----------------------------------------------------------
# Calibration data set
# Don't use bushfire set (so avoid 2003)
data.cal <- window(Cotter, start = "2005-01-01",
end = "2008-12-31")
# Define the model, important to define return_state=T
Cotter_mod <- hydromad(DATA=data.cal,
sma = "gr4j", routing = "gr4jrouting",
x1 = c(100,1500), x2 = c(-30,20), x3 = c(5,500),
x4 = c(0.5,10), etmult=c(0.01,0.5),
return_state=TRUE)
# Fit without the MODIS data, traditional fit
# Using shuffled complex evolution algorithm for fitting
Cotter_fit<- fitBySCE(Cotter_mod,
objective=~hmadstat("viney")(Q,X))
# Extract the coefficients and the summary
summary(Cotter_fit)
xyplot(Cotter_fit)
# ***************************************************
# ----------------------------------------------------------------
# 4. Including the ET data
# using ETa.merge()
Flow.Modis.zoo <- ETa.merge(Flowdata=Cotter,ETdata=Cot_MODISET)
# remake the calibration data
data.modis.cal <- window(Flow.Modis.zoo, start = "2005-01-01",end = "2008-12-31")
# Because we have rebuilt data.cal, redefine the model
Cotter_mod_M <- hydromad(DATA=data.modis.cal,
sma = "gr4j", routing = "gr4jrouting",
x1 = c(100,1500), x2 = c(-30,20),
x3 = c(5,500), x4 = c(0.5,10),
etmult=c(0.01,0.5),
return_state=TRUE)
# Evaluate the model using the objective
# using equal weighting between ETa and Q
w=0.5
Cotter_Fit_B <- fitBySCE(Cotter_mod_M,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE) {
#, Objfun=) {
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney"))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w", env=parent.frame())
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_aggr==T) {
w <- get("w", env=parent.frame())
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = hmadstat("viney")))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=F)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
#
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr (Not yet working)
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~Objfun)
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w", env=parent.frame())
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_Aggr==T) {
w <- get("w", env=parent.frame())
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=T)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
#
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr (Not yet working)
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney"))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w", env=parent.frame())
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_Aggr==T) {
w <- get("w", env=parent.frame())
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=T)
FM_fitBySCE <- function(mod, w=0.5, FIT_base=TRUE,
FIT_ETFun=TRUE,
FIT_Aggr=TRUE, Objfun=hmadstat("viney")) {
#
# mod is a hydromad model specified for fitting
# this model might include ET data as well as flow data
# w is the weighting between ET and flow data in the calibration
# FIT_base is whether to fit just on flow data (TRUE or FALSE)
# FIT_ETFun is whether to fit the ETFun function based on NSE
# FIT_Aggr is whether to fit the ETAggr function with any obj fun
# Objfun specifies the objective function to use in both the Q fit and the
# ETAggr (Not yet working)
#print(Objfun)
# Fit Q only
if (FIT_base==T) {
base_fit<- fitBySCE(mod,
objective=~hmadstat("viney")(Q,X))
}
# fit Q and ET, but using NSE for ET
if (FIT_ETFun==T) {
#print(w)
w <- get("w", env=parent.frame())
ETF_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETfun")(DATA=DATA,U=U))
}
# fit Q and ET using ETAggr and obj fun
if (FIT_Aggr==T) {
w <- get("w", env=parent.frame())
ETAggr_fit <- fitBySCE(mod,
objective=~w*hmadstat("viney")(X,Q) +
(1-w)*hmadstat("ETaggrViney")(DATA=DATA,U=U,
objf = Objfun))
}
out <- runlist(
"Base" = if(!exists(base_fit)) base_fit,
"ET standard fit" = if(!exists(ETF_fit)) ETF_fit,
"ET Aggr fit" = if(!exists(ETAggr_fit)) ETAggr_fit)
return(out)
}
test <- FM_fitBySCE(mod=Cotter_mod_M, FIT_base=T)
